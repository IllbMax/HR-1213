3. Leistungsoptimierung
Für die Analyse des Ausgangsprogramms mit gprof ergab sich folgendes Ergebnis:

  %   cumulative   self              self     total
 time   seconds   seconds    calls  ms/call  ms/call  name
 82.60      0.66     0.66        1   660.82   790.98  calculate
 16.27      0.79     0.13 13024980     0.00     0.00  getResiduum
  1.25      0.80     0.01        1    10.01    10.01  initMatrices
  0.00      0.80     0.00        3     0.00     0.00  allocateMemory
  0.00      0.80     0.00        1     0.00     0.00  AskParams
  0.00      0.80     0.00        1     0.00     0.00  DisplayMatrix
  0.00      0.80     0.00        1     0.00     0.00  allocateMatrices
  0.00      0.80     0.00        1     0.00     0.00  displayStatistics
  0.00      0.80     0.00        1     0.00     0.00  freeMatrices
  0.00      0.80     0.00        1     0.00     0.00  initVariables

Wie zu sehen, nimmt calculate() 82,6% der Programmlaufzeit in Anspruch und 
getResiduum() wird über 13 Millionen Mal aufgerufen. In diesen Funktionen wird
also der Hauptansatzpunkt für Optimierungen sein. Die restlichen Funktionen können
vernachlässigt werden, da sie entweder kaum zur Ausführungszeit beitragen oder
wie initMatrices() wohl eher unwahrscheinlich verbessert werden können, da sie die 
benötigten Matrizen allokieren und initialisieren.

Da wir uns bei der Optimierung auf calculate() und getResiduum() beschränken verwenden
wir zur Zeitmessung, die in das Programm eingebaute Zeitangabe, da hier nur die Laufzeit von
calculate() und dem darin aufgerufenen getResiduum() misst.

Um auf eine aussagekräftige Programmlaufzeit für das Ursprungsprogramm zu kommen haben wir
folgende Aufrufparameter verwendet:

                     Threads  Gauss  Interlines  Störfkt != 0  Iteration   #Iterationen
Aufruf: partdiff-seq    1      1      250         2            2           350

Der geringe Interlines-Wert liegt darin begründet, dass bei zu hohen Interlines-Werten keine
Werte > 0 in der Matrixausgabe des Programms auftauchen und so die Korrektheit der Berechungen
nach Quelltextanpassungen nicht mehr garantiert werden kann.

Für die Messwerte wurden auf 3 Knoten je 1 Prozess mit dem Programm gestartet. Die Tabelle
mit den Messwerten folgt am Ende. Für jeden neuen Messpunkt wurden die jeweils vorherigen 
Anpassungen beibehalten. Alle Anpassungen in partdiff-seq.c

0 Anpassungen: Programm wie in Auslieferungszustand ausgeführt.

Compileroptimierungen:

1. Anpassung: Kompilieren mit Cflag -O2
2. Anpassung: Kompilieren mit Cflag -O3

Anpassung des Speicherzugriffsmuster:

3. Anpassung: Zeile 217: Neuer Pointer **Mat2 um den Zugriff auf Matrix[m2] 
zwischen zu speichern und bei star-Berechnung Speichersuchzeit einzusparen.

4. Anpassung: Zeile 236/240: Tauschen von j und i als Zählvaribalen, damit bei 
der Starberechung entsprechend der Kommentare i für die Zeilen und j für die 
Spalten der Matrix steht, da die Matrix zeilen- und nicht spaltenweise im
Speicher ablegt ist.

5. Anpassung: Zeile 242: Zugriff auf Matrix[m2][i][j] in mij zwischenspeichern, da 
zweimal (Zeile: 246, 262 ) auf den Wert zugegriffen wird und so Zugriffszeit eingespart
werden kann.

6. Anpassung: Zeile: 246: Vertauschen der Summanden in der Starberechung, so dass
erst auf Werte der gleiche Zeile zugegriffen wird, um mögliche Cache Misses zu vermeiden.

7. Anpassung: Zeile 255: Werte für PI * arguments->h und arguments->h * arguments->h bei
der Initialiersierung von calculation_arguments, ab Zeile 58 berechnen und für die
Residuumsberechnung zwischenspeichern, um ständige Neuberechnung der immer gleichen
Werte zu verhindern. Hierfür struct calculation_arguments in Zeile 35/36 erweitern.

8. Anpassung: ab Zeile 249: Residuumsberechnung in calculate() durchführen und nicht in 
Extrafunktion auslagern um Codesprünge zu unterbinden.

Mathematische Anpassungen:

9. Anpassung: Zeilen 246, 251, 255: Die Division des Stars durch 4 in der Residuums-
berechnung weglassen, die Addition von 4*mij in der Starberechnung weglassen und 
statt dessen die Differenz der 4 mij umgebenden Zellen durch 4 dividieren.
 

Messwerte jeweils in Sekunden
#Anpassungen	1. Messung	2. Messung	3. Messung	Mittel		%
0		175.571878	176.320661	176.819564	176.237367	100
1		135.154170	135.762710	135.817688	135.578189	76.9
2		107.884175	108.029850	108.185823	108.243904	61.4		
3		107.980768	108.454113	109.562276	108.665719	61.7
4		95.482527	95.619103	96.025068	95.708899	54.3
5		95.413421	95.684210	97.421549	96.17306	54.6
6		110.273225	110.514556	112.507091	111.098290	63.0
7		60.848770	60.951913	60.979479	60.926720	34,6		
8		60.850598	60.883190	61.043477	60.925755	34,6
9

Bei Messung 6 scheint es eine Lastspitze o.Ä. auf dem Cluster gegeben zu haben, da dieser
Wert aus dem Werteverlauf ausbricht und dies nicht an den Codeanpassungen liegt,
da in folgenden Messungen die Werte deutlich niedriger lagen, obwohl die durchgeführten
Anpassungen beibehalten wurden. Auch die Werte für 7 und 8 scheinen starke Ausbrecher 
darzustellen, der plötzliche Leistungszugewinn scheint jedoch eher unerklärlich.
Die Berechnungen der Matrizenwerte stimmen jedoch bei jeder Codeanpassung mit der
ursprünglichen Ausgabe überein.
